1. Create Project
2. Remove unwanted files
3. Configure for console run
4. Adding EF, brief overview to it
5. Create controller, API controller attribute, attribute routing, ControllerBase
6. AddScoped dependency injection
7. add version number
	- Microsoft.AspNetCore.Mvc.Versioning
	- services.AddApiVersioning(config =>
            {
                config.DefaultApiVersion = new ApiVersion(1, 0);
                config.AssumeDefaultVersionWhenUnspecified = true;
            });
			[Route("api/v{version:apiVersion}/cases")]
8. Smart url convention

	- not api/getauthors
	- api/authors/{authorId}
	- hierarchy => 
	- api/auhtors/{authorid}/courses/{coursid}
	- api/authors?orderby=name
	- api/auhtors/{auhtorid}/pagetotals => api/authors/{authorid}/totalamountofpages
	
9.  Set proper status code
10. content negotiation with xml or json
	- services.AddControllers(setupAction =>
            {
                setupAction.ReturnHttpNotAcceptable = true;
            }).AddXmlDataContractSerializerFormatters();

11. Enitity DTO
12. IActionResult<T> - needed for API documentation
14. AutoMapper
	- AutoMapper.Extensions.Microsoft.DependencyInjection
	- services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());
	- public class RespondentProfile: Profile
    {
        public RespondentProfile()
        {
            CreateMap<Respondent, RespondentDto>()
                .ForMember(
                    dest => dest.Name,
                    opt => opt.MapFrom(src => $"{src.FirstName} {src.LastName}"))
                .ForMember(
                    dest => dest.Age,
                    opt => opt.MapFrom(src => src.DateOfBirth.GetCurrentAge()));
        }
    }
	
	- _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
	
	-   [HttpGet("respondents")]
        public ActionResult<IEnumerable<RespondentDto>> GetRespondents()
        {
            var respondents = _repository.GetRespondents();
            return Ok(_mapper.Map<IEnumerable<RespondentDto>>(respondents));
        }